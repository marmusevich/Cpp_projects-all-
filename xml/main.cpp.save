#include <iostream>
#include <sstream>
#include "pugixml.hpp"

using namespace std;


int g_keyLeft = 0x25;
int g_keyRight = 0x27;
int g_keyFire = 0x20;

bool SaveGameConfig(string config= "config.xml")
{
	pugi::xml_document doc;

    pugi::xml_parse_result result = doc.load_file(config.c_str());

	if (!result)
		return false; // Ошибка парсинга данных

	// ищем нужные нам XML-ноды
	pugi::xml_node nodeLeft = doc.child("left");
	pugi::xml_node nodeRight = doc.child("right");
	pugi::xml_node nodeFire = doc.child("fire");

    cout <<"nodeLeft ="<<nodeLeft.child_value() << endl;
    cout <<"nodeRight ="<<nodeRight.child_value() << endl;
    cout <<"nodeFire ="<<nodeFire.child_value() << endl;


	// load defaults
	g_keyLeft = 0x25;
	g_keyRight = 0x27;
	g_keyFire = 0x20;

	// читаем конфиг из XML-нод
	if (nodeLeft)
		stringstream(nodeLeft.child_value()) >>std::hex >>g_keyLeft;
	if (nodeRight)
		stringstream(nodeRight.child_value()) >>std::hex >>g_keyRight;
	if (nodeFire)
		stringstream(nodeFire.child_value()) >>std::hex >>g_keyFire;
		
    doc.save_file(config.c_str())		

	return true;
}


bool LoadGameConfig(string config= "config.xml")
{
	pugi::xml_document doc;

	//pugi::xml_parse_result result = doc.load_buffer_inplace((void*)config.c_str(), config.length());


    pugi::xml_parse_result result = doc.load_file(config.c_str());

	if (!result)
		return false; // Ошибка парсинга данных

	// ищем нужные нам XML-ноды
	pugi::xml_node nodeLeft = doc.child("left");
	pugi::xml_node nodeRight = doc.child("right");
	pugi::xml_node nodeFire = doc.child("fire");

    cout <<"nodeLeft ="<<nodeLeft.child_value() << endl;
    cout <<"nodeRight ="<<nodeRight.child_value() << endl;
    cout <<"nodeFire ="<<nodeFire.child_value() << endl;


	// load defaults
	g_keyLeft = 0x25;
	g_keyRight = 0x27;
	g_keyFire = 0x20;

	// читаем конфиг из XML-нод
	if (nodeLeft)
		stringstream(nodeLeft.child_value()) >>std::hex >>g_keyLeft;
	if (nodeRight)
		stringstream(nodeRight.child_value()) >>std::hex >>g_keyRight;
	if (nodeFire)
		stringstream(nodeFire.child_value()) >>std::hex >>g_keyFire;

	return true;
}


// save document to file
//std::cout << "Saving result: " << doc.save_file("save_file_output.xml") << std::endl;



int main()
{

   	const std::string config = "config.xml";

    cout <<"g_keyLeft ="<<g_keyLeft << endl;
    cout <<"g_keyRight ="<<g_keyRight << endl;
    cout <<"g_keyFire ="<<g_keyFire << endl;
    LoadGameConfig(config);
    cout <<"g_keyLeft ="<<g_keyLeft << endl;
    cout <<"g_keyRight ="<<g_keyRight << endl;
    cout <<"g_keyFire ="<<g_keyFire << endl;


    std::stringstream ss;
    ss << "22";
    int k = 0;
    ss >> k;
    std::cout << k << std::endl;

        return 0;
}
